import os, ROOT,glob

import ctypes

# Test : nAK4 >= 6 and nprobejets >= 2 [1.0, 0.9971, 0.9944, 0.9904, 0.9831, 0.9695, 0.9458] 
# nAK4 < 6 nprobejets >= 2: [1.0, 0.9969, 0.9938, 0.9876, 0.9741, 0.9394, 0.8229]
# nAK4 >= 6 nprobejets == 1: [1.0, 0.9988, 0.9983, 0.9979, 0.9976, 0.9973, 0.997, 0.9967, 0.9964, 0.9961, 0.9957, 0.9954, 0.9952, 0.995, 0.9948, 0.9945, 0.9942, 0.9939, 0.9936, 0.9933, 0.9931, 0.9927, 0.9923, 0.992, 0.9916, 0.9913, 0.9909, 0.9905, 0.9902, 0.9899, 0.9895, 0.989, 0.9886, 0.9882, 0.9878, 0.9874, 0.9869, 0.9863999999999999, 0.986, 0.9855, 0.9851, 0.9846, 0.9841, 0.9835, 0.983, 0.9826, 0.9822, 0.9817, 0.9812, 0.9806, 0.9801, 0.9795, 0.9791, 0.9786, 0.9781, 0.9776, 0.977, 0.9763, 0.9758, 0.975, 0.9745, 0.9738, 0.9732, 0.9726, 0.9718, 0.9712, 0.9705, 0.9701, 0.9694, 0.9687, 0.9682, 0.9676, 0.9668, 0.966, 0.9654, 0.9646, 0.9638, 0.9631, 0.9621999999999999, 0.9614, 0.9606, 0.9599, 0.9591, 0.9581999999999999, 0.9572, 0.9564, 0.9556, 0.9544, 0.9536, 0.9528, 0.9521, 0.951, 0.9501, 0.9491, 0.9478, 0.9468, 0.9458, 0.9451, 0.9440999999999999, 0.943, 0.9423, 0.9414, 0.9405, 0.9396, 0.9383, 0.9371, 0.9359, 0.935, 0.9338, 0.9323, 0.9312, 0.9301, 0.9284, 0.927, 0.9258, 0.9251, 0.9238999999999999, 0.9224, 0.9215, 0.9207, 0.9191, 0.9174, 0.9165, 0.9149, 0.9136, 0.9124, 0.9113, 0.9096, 0.9077999999999999, 0.906, 0.9045, 0.9033, 0.9015, 0.8997999999999999, 0.8984, 0.8966, 0.8946, 0.8931, 0.8916, 0.8901, 0.8887, 0.8874, 0.8855999999999999, 0.8838, 0.8819, 0.8805, 0.8783, 0.8764, 0.8748, 0.8731, 0.8713, 0.8693, 0.8675999999999999, 0.8658, 0.8633, 0.8613, 0.8599, 0.8569, 0.8547, 0.8527, 0.8506, 0.849, 0.847, 0.8447, 0.8429, 0.8406, 0.8386, 0.8368, 0.8344, 0.8329, 0.8308, 0.8285, 0.8261000000000001, 0.8243, 0.8224, 0.8199, 0.8171999999999999, 0.8153, 0.8122, 0.8089999999999999, 0.8069, 0.8042, 0.802]
# nAK4 < 6  nprobejets == 1: [1.0, 0.9957, 0.9928, 0.9894, 0.9848, 0.9786, 0.9714, 0.9624, 0.9513, 0.9392, 0.9248, 0.9087, 0.8908, 0.8709, 0.8466, 0.8167]

ROOT.ROOT.EnableImplicitMT()
ROOT.gROOT.SetBatch(ROOT.kTRUE)



binning_double_SR = {#1 : [0,0.11], 
                  1 : [0.45,0.50], 
                  2 : [0.50,0.55], 
                  3 : [0.55,0.60], 
                  4 : [0.60,0.65], 
                  5 : [0.65,0.70], 
                  6 : [0.70,0.75], 
                  7 : [0.75,0.8], 
                  8 : [0.8,0.85], 
                  9 : [0.85,0.9], 
                  10 : [0.9,0.9458], 
                  11 : [0.9458,0.9695], 
                  12 : [0.9695,0.9831], 
                  13 : [0.9831,0.9904], 
                  14 : [0.9904,0.9944], 
                  15 : [0.9944,0.9971], 
                  16 : [0.9971,1.0],         
        }


binning_double_CR = {#1 : [0,0.11], 
                  1 : [0.35,0.40], 
                  2 : [0.40,0.45], 
                  3 : [0.45,0.50], 
                  4 : [0.50,0.55], 
                  5 : [0.55,0.60], 
                  6 : [0.60,0.65], 
                  7 : [0.65,0.7], 
                  8 : [0.7,0.85], 
                  9 : [0.75,0.8], 
                  10 : [0.8,0.8229], 
                  11 : [0.8229,0.9394], 
                  12 : [0.9394,0.9741], 
                  13 : [0.9741,0.9876], 
                  14 : [0.9876,0.9938], 
                  15 : [0.9938,0.9969], 
                  16 : [0.9969,1.0],         
        }

# nAK4 >= 6 nprobejets == 1: [1.0, 0.9983, 0.9979, 0.9976, 0.9973, 0.997, 0.9967, 0.9964, 0.9961, 0.9957, 0.9954, 0.9952, 0.995, 0.9948, 0.9945, 0.9942, 0.9939, 0.9936, 0.9933, 0.9931, 0.9927, 0.9923, 0.992, 0.9916, 0.9913, 0.9909, 0.9905, 0.9902, 0.9899, 0.9895, 0.989, 0.9886, 0.9882, 0.9878, 0.9874, 0.9869, 0.9863999999999999, 0.986, 0.9855, 0.9851, 0.9846, 0.9841, 0.9835, 0.983, 0.9826, 0.9822, 0.9817, 0.9812, 0.9806, 0.9801, 0.9795, 0.9791, 0.9786, 0.9781, 0.9776, 0.977, 0.9763, 0.9758, 0.975, 0.9745, 0.9738, 0.9732, 0.9726, 0.9718, 0.9712, 0.9705, 0.9701, 0.9694, 0.9687, 0.9682, 0.9676, 0.9668, 0.966, 0.9654, 0.9646, 0.9638, 0.9631, 0.9621999999999999, 0.9614, 0.9606, 0.9599, 0.9591, 0.9581999999999999, 0.9572, 0.9564, 0.9556, 0.9544, 0.9536, 0.9528, 0.9521, 0.951, 0.9501, 0.9491, 0.9478, 0.9468, 0.9458, 0.9451, 0.9440999999999999, 0.943, 0.9423, 0.9414, 0.9405, 0.9396, 0.9383, 0.9371, 0.9359, 0.935, 0.9338, 0.9323, 0.9312, 0.9301, 0.9284, 0.927, 0.9258, 0.9251, 0.9238999999999999, 0.9224, 0.9215, 0.9207, 0.9191, 0.9174, 0.9165, 0.9149, 0.9136, 0.9124, 0.9113, 0.9096, 0.9077999999999999, 0.906, 0.9045, 0.9033, 0.9015, 0.8997999999999999, 0.8984, 0.8966, 0.8946, 0.8931, 0.8916, 0.8901, 0.8887, 0.8874, 0.8855999999999999, 0.8838, 0.8819, 0.8805, 0.8783, 0.8764, 0.8748, 0.8731, 0.8713, 0.8693, 0.8675999999999999, 0.8658, 0.8633, 0.8613, 0.8599, 0.8569, 0.8547, 0.8527, 0.8506, 0.849, 0.847, 0.8447, 0.8429, 0.8406, 0.8386, 0.8368, 0.8344, 0.8329, 0.8308, 0.8285, 0.8261000000000001, 0.8243, 0.8224, 0.8199, 0.8171999999999999, 0.8153, 0.8122, 0.8089999999999999, 0.8069, 0.8042, 0.802]
binning_single_SR = {#1 : [0,0.11], 
                  1 : [0.45,0.50], 
                  2 : [0.50,0.55], 
                  3 : [0.55,0.60], 
                  4 : [0.60,0.65], 
                  5 : [0.65,0.70], 
                  6 : [0.70,0.75], 
                  7 : [0.75,0.8], 
                  8 : [0.8,0.85], 
                  9 : [0.85,0.9], 
                  10 : [0.9,0.9458], 
                  11 : [0.9458,0.9695], 
                  12 : [0.9695,0.9831], 
                  13 : [0.9831,0.9904], 
                  14 : [0.9904,0.9944], 
                  15 : [0.9944,0.9971], 
                  16 : [0.9971,1.0],         
        }


# nAK4 < 6  nprobejets == 1: [1.0, 0.9957, 0.9928, 0.9894, 0.9848, 0.9786, 0.9714, 0.9624, 0.9513, 0.9392, 0.9248, 0.9087, 0.8908, 0.8709, 0.8466, 0.8167]
binning_single_CR = {#1 : [0,0.11], 
                  1 : [0.6,0.65], 
                  2 : [0.65,0.7], 
                  3 : [0.7,0.75], 
                  4 : [0.75,0.8], 
                  5 : [0.8,0.85], 
                  6 : [0.85,0.9], 
                  7 : [0.9,0.9392], 
                  8 : [0.9392,0.9513], 
                  9 : [0.9513,0.9624], 
                  10 : [0.9624,0.9714], 
                  11 : [0.9714,0.9786], 
                  12 : [0.9786,0.9848], 
                  13 : [0.9848,0.9894], 
                  14 : [0.9894,0.9928], 
                  15 : [0.9928,0.9957], 
                  16 : [0.9957,1.0],         
        }

# nAK4 < 6  nprobejets == 1: [1.0, 0.9957, 0.9928, 0.9894, 0.9848, 0.9786, 0.9714, 0.9624, 0.9513, 0.9392, 0.9248, 0.9087, 0.8908, 0.8709, 0.8466, 0.8167]
binning_single = {#1 : [0,0.11], 
                  1 : [0.7705,0.8191], 
                  2 : [0.8191,0.8593], 
                  3 : [0.8593,0.8914], 
                  4 : [0.8914,0.9184], 
                  5 : [0.9184,0.9403], 
                  6 : [0.9403,0.9574], 
                  7 : [0.9574,0.9712], 
                  8 : [0.9712,0.9817], 
                  9 : [0.9817,0.9892], 
                  10 : [0.9892,0.9943], 
                  11 : [0.9943,1.0],         
        }

binning_double = {#1 : [0,0.11], 
                  1 : [0.3,0.35], 
                  2 : [0.35,0.4], 
                  3 : [0.4,0.45], 
                  4 : [0.45,0.5], 
                  5 : [0.5,0.5608], 
                  6 : [0.5608,0.8656], 
                  7 : [0.8656,0.9544], 
                  8 : [0.9544,0.9817], 
                  9 : [0.9817,0.9919], 
                  10 : [0.9919,0.9964], 
                  11 : [0.9964,1.0],         
        }

# [1.0, 0.9973, 0.9943, 0.9904, 0.9859, 0.9808, 0.9745, 0.967, 0.958, 0.9472, 0.934, 0.9175]
binning_HHH_single = {
                  1 : [0.9,0.9175], 
                  2 : [0.9175,0.934], 
                  3 : [0.934,0.9472], 
                  4 : [0.9472,0.958], 
                  5 : [0.958,0.967], 
                  6 : [0.967,0.9745], 
                  7 : [0.9745,0.9808], 
                  8 : [0.9808,0.9904], 
                  9 : [0.9904,0.9943], 
                  10 : [0.9943,0.9973], 
                  11 : [0.9973,1.0],  

}

categories = {'ProbMultiH_double_SR' : '(nprobejets >= 2 && nsmalljets >= 6)',
              'ProbMultiH_double_CR' : '(nprobejets >= 2 && nsmalljets < 6)',
              'ProbMultiH_single_SR' : '(nprobejets == 1 && nsmalljets >= 6)',
              'ProbMultiH_single_CR' : '(nprobejets == 1 && nsmalljets < 6)',
              'ProbMultiH_single' : '(nprobejets == 1)',
              'ProbMultiH_double' : '(nprobejets > 1)',
              'ProbMultiH_single_HHH' : '(nprobejets == 1 && (ProbHHH + ProbHHH4b2tau > ProbHH4b + ProbHH2b2tau))',
              'ProbMultiH_double_HHH' : '(nprobejets > 1 && (ProbHHH + ProbHHH4b2tau > ProbHH4b + ProbHH2b2tau))',
              'ProbMultiH_single_HH' : '(nprobejets == 1 && (ProbHHH + ProbHHH4b2tau < ProbHH4b + ProbHH2b2tau))',
              'ProbMultiH_double_HH' : '(nprobejets > 1 && (ProbHHH + ProbHHH4b2tau < ProbHH4b + ProbHH2b2tau))',
}

binnings = {'ProbMultiH_double_SR' : binning_double_SR,
              'ProbMultiH_double_CR' : binning_double_CR,
              'ProbMultiH_single_SR' : '',
              'ProbMultiH_single_CR' : binning_single_CR,
              'ProbMultiH_single' : binning_single,
              'ProbMultiH_double' : binning_double,
              'ProbMultiH_single_HHH' : binning_HHH_single,
              'ProbMultiH_double_HHH' : '',
              'ProbMultiH_single_HH' : '',
              'ProbMultiH_double_HH' : '',
}


cat = 'ProbMultiH_single_HHH'


def get_integral_and_error(hist):
    integral = hist.Integral()
    error = ctypes.c_double(0.0)
    hist.IntegralAndError(0, hist.GetNbinsX() + 1, error)
    return integral, error.value

path = '/isilon/data/users/mstamenk/eos-triple-h/v28-spanet-boosted-classification-variables-pnet-v4-nanoaod/mva-inputs-2018/'

target = '%s/histograms'%cat

if not os.path.isdir(path + '/' + target):
    os.makedirs(path+'/'+target)


file_path = 'inclusive_boosted-weights/'

samples = glob.glob(path+'/'+file_path+'/*.root')
samples = [os.path.basename(s).replace('.root','') for s in samples]

outfile = ROOT.TFile(path +'/' + target + '/' + 'histograms_ProbMultiH.root','recreate')

#samples = ['GluGluToHHHTo6B_SM']

var = '(ProbHHH + ProbHHH4b2tau + ProbHH4b + ProbHH2b2tau)'

binning = binnings[cat]
cut = categories[cat]


for s in ['GluGluToHHTo2B2Tau', 'GluGluToHHTo4B_cHHH1','GluGluToHHHTo4B2Tau_SM','DYJetsToLL', 'ZZTo4Q', 'WWTo4Q', 'ZJetsToQQ',  'WJetsToQQ', 'TTToHadronic', 'TTToSemiLeptonic', 'QCD']: #samples:
    print(s)
    f_name = path + '/' + file_path + '/' + s + '.root'
    tree = ROOT.TChain('Events')
    tree.AddFile(f_name)

    if 'JetHT' in s:
        h_mva = ROOT.TH1F('data_obs','data_obs',11,0,11)
    else:
        h_mva = ROOT.TH1F(s,s,11,0,11)
    for i in range(1,h_mva.GetNbinsX() + 1):

        low,up = binning[i]
    
        h_name = s + '_histo_%d'%i
        tree.Draw("%s>>%s(100,0,1)"%(var,h_name),'(%s && %s > %f && %s < %f) * eventWeight'%(cut, var,low, var,up))
        h = ROOT.gPad.GetPrimitive(h_name)
        integral, error = get_integral_and_error(h)
        print(i,integral,error)
        h_mva.SetBinContent(i,integral)
        h_mva.SetBinError(i,error)

       
    #h_mva.Rebin(2)
    outfile.cd()
    h_mva.Write()


outfile.Close()





