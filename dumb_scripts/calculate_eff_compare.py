import sympy as sp

k4, kl = sp.symbols('k4 kl')


# 0bh3h - h1_mass
h1_mass_0bh3h = {
    'c3_0_d4_0': 0.075187,
    'c3_0_d4_99': 0.036150,
    'c3_0_d4_m1': 0.038332,
    'c3_19_d4_19': 0.030518,
    'c3_1_d4_0': 0.036970,
    'c3_1_d4_2': 0.036199,
    'c3_2_d4_m1': 0.036411,
    'c3_4_d4_9': 0.032898,
    'c3_m1_d4_0': 0.036426,
    'c3_m1_d4_m1': 0.036410,
    'c3_m1p5_d4_m0p5': 0.035549
}

# 0bh3h - h2_mass
h2_mass_0bh3h = {
    'c3_0_d4_0': 0.074925,
    'c3_0_d4_99': 0.036012,
    'c3_0_d4_m1': 0.038252,
    'c3_19_d4_19': 0.030399,
    'c3_1_d4_0': 0.036878,
    'c3_1_d4_2': 0.036077,
    'c3_2_d4_m1': 0.036336,
    'c3_4_d4_9': 0.032800,
    'c3_m1_d4_0': 0.036314,
    'c3_m1_d4_m1': 0.036278,
    'c3_m1p5_d4_m0p5': 0.035441
}

# 0bh3h - h3_mass
h3_mass_0bh3h = {
    'c3_0_d4_0': 0.073494,
    'c3_0_d4_99': 0.035451,
    'c3_0_d4_m1': 0.037559,
    'c3_19_d4_19': 0.029972,
    'c3_1_d4_0': 0.036146,
    'c3_1_d4_2': 0.035379,
    'c3_2_d4_m1': 0.035641,
    'c3_4_d4_9': 0.032273,
    'c3_m1_d4_0': 0.035685,
    'c3_m1_d4_m1': 0.035676,
    'c3_m1p5_d4_m0p5': 0.034876
}

# 0bh3h - ProbMultiH
ProbMultiH_0bh3h = {
    'c3_0_d4_0': 0.007425,
    'c3_0_d4_99': 0.003058,
    'c3_0_d4_m1': 0.003874,
    'c3_19_d4_19': 0.001697,
    'c3_1_d4_0': 0.003845,
    'c3_1_d4_2': 0.003944,
    'c3_2_d4_m1': 0.003444,
    'c3_4_d4_9': 0.002262,
    'c3_m1_d4_0': 0.002912,
    'c3_m1_d4_m1': 0.002984,
    'c3_m1p5_d4_m0p5': 0.002644
}

# 1bh2h - h1_mass
h1_mass_1bh2h = {
    'c3_0_d4_0': 0.052302,
    'c3_0_d4_99': 0.021126,
    'c3_0_d4_m1': 0.028441,
    'c3_19_d4_19': 0.011331,
    'c3_1_d4_0': 0.033094,
    'c3_1_d4_2': 0.036065,
    'c3_2_d4_m1': 0.029531,
    'c3_4_d4_9': 0.015938,
    'c3_m1_d4_0': 0.018799,
    'c3_m1_d4_m1': 0.019587,
    'c3_m1p5_d4_m0p5': 0.016963
}

# 1bh2h - ProbMultiH
ProbMultiH_1bh2h = {
    'c3_0_d4_0': 0.007926,
    'c3_0_d4_99': 0.002948,
    'c3_0_d4_m1': 0.004367,
    'c3_19_d4_19': 0.001051,
    'c3_1_d4_0': 0.005335,
    'c3_1_d4_2': 0.006096,
    'c3_2_d4_m1': 0.004508,
    'c3_4_d4_9': 0.001919,
    'c3_m1_d4_0': 0.002461,
    'c3_m1_d4_m1': 0.002536,
    'c3_m1p5_d4_m0p5': 0.002095
}

# (继续这样整理...)


import sympy as sp

k4, kl = sp.symbols('k4 kl')

# 定义字典的代码省略...

# 计算表达式的函数
def compute_eff(xs_dict, kl, k4):
    expressions = (
        xs_dict['c3_19_d4_19'] * (9.06091847289793e-6 * kl**4 - 4.9300725444354e-5 * kl**3 - 1.28986682294749e-5 * kl**2 * k4 + 7.41895333895021e-5 * kl**2 + 4.88255754744921e-5 * kl * k4 - 2.35068699375642e-5 * kl + 1.04428564804817e-7 * k4**2 - 4.64741922903036e-5 * k4)
        + xs_dict['c3_1_d4_2'] * (0.00181859908941073 * kl**4 + 0.0612344145588463 * kl**3 - 0.117052946187404 * kl**2 * k4 - 0.0852248165990747 * kl**2 + 0.495450856752831 * kl * k4 - 0.34453745664648 * kl - 0.00366709259597299 * k4**2 - 0.00802155837215495 * k4)
        + xs_dict['c3_0_d4_0'] * (-0.0156567767640078 * kl**4 + 0.296450661053703 * kl**3 + 0.116113507117289 * kl**2 * k4 - 1.17541762393027 * kl**2 - 0.943320520412559 * kl * k4 + 1.28092989493571 * kl - 0.00623794854805879 * k4**2 + 1.4471388065482 * k4) 
        + xs_dict['c3_2_d4_m1'] * (-0.00432741529694681 * kl**4 + 0.134315219432959 * kl**3 - 0.0348180673391588 * kl**2 * k4 - 0.254218287446726 * kl**2 - 0.0121776760133018 * kl * k4 + 0.00399143379444837 * kl - 0.00120239049516266 * k4**2 + 0.16843718336389 * k4)
        + xs_dict['c3_m1_d4_m1'] * (0.00269506107191331 * kl**4 + 0.0869752273166167 * kl**3 - 0.173807100320902 * kl**2 * k4 - 0.32776033936777 * kl**2 + 1.06104582179224 * kl * k4 - 0.205596010021244 * kl + 0.00556313938999517 * k4**2 - 1.44911579986085 * k4 + 1.0)
        + xs_dict['c3_m1p5_d4_m0p5'] * (0.00178625756289069 * kl**4 - 0.128966102905578 * kl**3 + 0.0878144535538641 * kl**2 * k4 + 0.614548792715285 * kl**2 - 0.499940475718061 * kl * k4 - 0.7311804061937 * kl - 0.00243811458821102 * k4**2 + 0.65837559557351 * k4)
        + xs_dict['c3_0_d4_99'] * (3.54406639377261e-6 * kl**4 - 8.23419233486239e-5 * kl**3 + 3.68602946798598e-6 * kl**2 * k4 + 0.000190060163750484 * kl**2 - 0.000133213138375878 * kl * k4 + 7.52070262542428e-5 * kl + 0.0001028747943406 * k4**2 - 0.000159817018482608 * k4)
        + xs_dict['c3_4_d4_9'] * (-0.000544382627375349 * kl**4 + 0.00482523670822783 * kl**3 + 0.00769645658563427 * kl**2 * k4 - 0.0138311282893779 * kl**2 - 0.0199714878689513 * kl * k4 + 0.0127645854332177 * kl + 3.21431122469228e-5 * k4**2 + 0.00902857694637784 * k4)
        + xs_dict['c3_1_d4_0'] * (0.0142160519792486 * kl**4 - 0.454703013515982 * kl**3 + 0.114062909229438 * kl**2 * k4 + 1.2416391532208 * kl**2 - 0.0810021309692927 * kl * k4 - 0.0164237414582671 * kl + 0.00784728450225797 * k4**2 - 0.825636512988201 * k4)
    )
    return expressions

# 使用 globals() 获取全局变量中的字典
kl = 0.0
k4 = 1.0

xs_dict_list = ['h1_mass_0bh3h', 'h2_mass_0bh3h', 'h3_mass_0bh3h', 'ProbMultiH_0bh3h', 'h1_mass_1bh2h', 'ProbMultiH_1bh2h']

for xs_dict_name in xs_dict_list:
    xs_dict = globals()[xs_dict_name]  # 使用 globals() 获取字典
    result = compute_eff(xs_dict, kl, k4)
    print("{} : {:.6g}".format(xs_dict_name, result))

    eff_basis = xs_dict['c3_m1_d4_0']

    ratio = eff_basis/result
    print(ratio)