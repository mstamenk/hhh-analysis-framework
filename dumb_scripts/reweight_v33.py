import sympy as sp
import ROOT
import numpy as np
import matplotlib.pyplot as plt

k4, k3 = sp.symbols('k4 k3')



#reweight like 4b2gamma group
# reweight = {'c3_0_d4_0'      :'-0.00623794854805879*k4**2 + 0.116113507117289*k4*k3**2 - 0.943320520412559*k4*k3 + 1.4471388065482*k4 - 0.0156567767640078*k3**4 + 0.296450661053703*k3**3 - 1.17541762393027*k3**2 + 1.28092989493571*k3',  
#             'c3_1_d4_2'      :'-0.00366709259597299*k4**2 - 0.117052946187404*k4*k3**2 + 0.495450856752831*k4*k3 - 0.00802155837215495*k4 + 0.00181859908941073*k3**4 + 0.0612344145588463*k3**3 - 0.0852248165990747*k3**2 - 0.34453745664648*k3',  
#             'c3_0_d4_99'     :'0.0001028747943406*k4**2 + 3.68602946798598e-6*k4*k3**2 - 0.000133213138375878*k4*k3 - 0.000159817018482608*k4 + 3.54406639377261e-6*k3**4 - 8.23419233486239e-5*k3**3 + 0.000190060163750484*k3**2 + 7.52070262542428e-5*k3', 
#             'c3_m1_d4_m1'    :'0.00556313938999517*k4**2 - 0.173807100320902*k4*k3**2 + 1.06104582179224*k4*k3 - 1.44911579986085*k4 + 0.00269506107191331*k3**4 + 0.0869752273166167*k3**3 - 0.32776033936777*k3**2 - 0.205596010021244*k3 + 1.0',  
#             'c3_19_d4_19'    :'1.04428564804817e-7*k4**2 - 1.28986682294749e-5*k4*k3**2 + 4.88255754744921e-5*k4*k3 - 4.64741922903036e-5*k4 + 9.06091847289793e-6*k3**4 - 4.9300725444354e-5*k3**3 + 7.41895333895021e-5*k3**2 - 2.35068699375642e-5*k3',  
#             'c3_4_d4_9'      :'3.21431122469228e-5*k4**2 + 0.00769645658563427*k4*k3**2 - 0.0199714878689513*k4*k3 + 0.00902857694637784*k4 - 0.000544382627375349*k3**4 + 0.00482523670822783*k3**3 - 0.0138311282893779*k3**2 + 0.0127645854332177*k3',  
#             'c3_2_d4_m1'     :'-0.00120239049516266*k4**2 - 0.0348180673391588*k4*k3**2 - 0.0121776760133018*k4*k3 + 0.16843718336389*k4 - 0.00432741529694681*k3**4 + 0.134315219432959*k3**3 - 0.254218287446726*k3**2 + 0.00399143379444837*k3',  
#             'c3_1_d4_0'      :'0.00784728450225797*k4**2 + 0.114062909229438*k4*k3**2 - 0.0810021309692927*k4*k3 - 0.825636512988201*k4 + 0.0142160519792486*k3**4 - 0.454703013515982*k3**3 + 1.2416391532208*k3**2 - 0.0164237414582671*k3', 
#             'c3_m1p5_d4_m0p5':'-0.00243811458821102*k4**2 + 0.0878144535538641*k4*k3**2 - 0.499940475718061*k4*k3 + 0.65837559557351*k4 + 0.00178625756289069*k3**4 - 0.128966102905578*k3**3 + 0.614548792715285*k3**2 - 0.7311804061937*k3'
# }

#reweight without SM point
reweight = {
'c3_0_d4_m1'     :'-0.0161476809586248*k4**2 + 0.300573794969898*k4*k3**2 - 2.44189875693768*k4*k3 + 3.74609305783026*k4 - 0.0405294519629029*k3**4 + 0.767398233215358*k3**3 - 3.04271005734368*k3**2 + 3.31584127609122*k3', 
'c3_1_d4_2'      :'-0.00958859672452369*k4**2 - 0.00682975237964234*k4*k3**2 - 0.400016028415347*k4*k3 + 1.36570545324736*k4 - 0.0130439262317897*k3**4 + 0.342646452477525*k3**3 - 1.20101476889683*k3**2 + 0.871412242651092*k3', 
'c3_0_d4_99'     :'0.000105885841639257*k4**2 - 5.23617656123195e-5*k4*k3**2 + 0.000322126094205602*k4*k3 - 0.000858348492518969*k4 + 1.11015662701719e-5*k3**4 - 0.00022543816007994*k3**3 + 0.000757432278807495*k3**2 - 0.00054309568499772*k3', 
'c3_m1_d4_m1'    :'0.0145463193897952*k4**2 - 0.341020492160638*k4*k3**2 + 2.41950813790225*k4*k3 - 3.53311958472114*k4 + 0.0252421601388874*k3**4 - 0.339939106584688*k3**3 + 1.36494167786653*k3**2 - 2.05024473142073*k3 + 1.0', 
'c3_19_d4_19'    :'2.73056479548342e-7*k4**2 - 1.60375172321393e-5*k4*k3**2 + 7.43259737330588e-5*k4*k3 - 8.55941044557537e-5*k4 + 9.48416172297911e-6*k3**4 - 5.73145550571972e-5*k3**3 + 0.00010596411783006*k3**2 - 5.8133724495842e-5*k3', 
'c3_4_d4_9'      :'8.40467844049801e-5*k4**2 + 0.00673031886261418*k4*k3**2 - 0.0121224652849645*k4*k3 - 0.00301253201814774*k4 - 0.000414108355000364*k3**4 + 0.00235857995339469*k3**3 - 0.0040509111985741*k3**2 + 0.00210643960017975*k3', 
'c3_2_d4_m1'     :'-0.00314397230551962*k4**2 + 0.0013226400775187*k4*k3**2 - 0.305789261562439*k4*k3 + 0.618863852036883*k4 - 0.00920063807838142*k3**4 + 0.226586453595235*k3**3 - 0.620070852695313*k3**2 + 0.402685037178459*k3', 
'c3_1_d4_0'      :'0.0205188291556602*k4**2 - 0.121805899075775*k4*k3**2 + 1.8352252961707*k4*k3 - 3.76530231266095*k4 + 0.0460206660065982*k3**4 - 1.05690223977308*k3**3 + 3.62934030100654*k3**2 - 2.61845872724005*k3', 
'c3_m1p5_d4_m0p5':'-0.00637510423931106*k4**2 + 0.161097788988869*k4*k3**2 - 1.09530337394047*k4*k3 + 1.57171600888271*k4 - 0.00809528724540441*k3**4 + 0.0581343798313945*k3**3 - 0.127298785135315*k3**2 + 0.0772596925493239*k3'
}



xs ={'c3_19_d4_19': 131.8,
     'c3_1_d4_2'  :0.01415,
     'c3_0_d4_0'  :0.03274,
     'c3_2_d4_m1' :0.0511,
     'c3_m1_d4_m1':0.09674,
     'c3_m1p5_d4_m0p5':0.1723,
     'c3_0_d4_99' :5.243,
     'c3_4_d4_9'  :0.2182,
     'c3_1_d4_0'  :0.02567  
}

#expressions is the same as 4b2gamma
expressions = (
      xs['c3_19_d4_19']*(9.06091847289793e-6*k3**4 - 4.9300725444354e-5*k3**3 - 1.28986682294749e-5*k3**2*k4 + 7.41895333895021e-5*k3**2 + 4.88255754744921e-5*k3*k4 - 2.35068699375642e-5*k3 + 1.04428564804817e-7*k4**2 - 4.64741922903036e-5*k4)
    + xs['c3_1_d4_2']*(0.00181859908941073*k3**4 + 0.0612344145588463*k3**3 - 0.117052946187404*k3**2*k4 - 0.0852248165990747*k3**2 + 0.495450856752831*k3*k4 - 0.34453745664648*k3 - 0.00366709259597299*k4**2 - 0.00802155837215495*k4)
    + xs['c3_0_d4_0']*(-0.0156567767640078*k3**4 + 0.296450661053703*k3**3 + 0.116113507117289*k3**2*k4 - 1.17541762393027*k3**2 - 0.943320520412559*k3*k4 + 1.28092989493571*k3 - 0.00623794854805879*k4**2 + 1.4471388065482*k4) 
    + xs['c3_2_d4_m1']*(-0.00432741529694681*k3**4 + 0.134315219432959*k3**3 - 0.0348180673391588*k3**2*k4 - 0.254218287446726*k3**2 - 0.0121776760133018*k3*k4 + 0.00399143379444837*k3 - 0.00120239049516266*k4**2 + 0.16843718336389*k4)
    + xs['c3_m1_d4_m1']*(0.00269506107191331*k3**4 + 0.0869752273166167*k3**3 - 0.173807100320902*k3**2*k4 - 0.32776033936777*k3**2 + 1.06104582179224*k3*k4 - 0.205596010021244*k3 + 0.00556313938999517*k4**2 - 1.44911579986085*k4 + 1.0)
    + xs['c3_m1p5_d4_m0p5']*(0.00178625756289069*k3**4 - 0.128966102905578*k3**3 + 0.0878144535538641*k3**2*k4 + 0.614548792715285*k3**2 - 0.499940475718061*k3*k4 - 0.7311804061937*k3 - 0.00243811458821102*k4**2 + 0.65837559557351*k4)
    + xs['c3_0_d4_99']*(3.54406639377261e-6*k3**4 - 8.23419233486239e-5*k3**3 + 3.68602946798598e-6*k3**2*k4 + 0.000190060163750484*k3**2 - 0.000133213138375878*k3*k4 + 7.52070262542428e-5*k3 + 0.0001028747943406*k4**2 - 0.000159817018482608*k4)
    + xs['c3_4_d4_9']*(-0.000544382627375349*k3**4 + 0.00482523670822783*k3**3 + 0.00769645658563427*k3**2*k4 - 0.0138311282893779*k3**2 - 0.0199714878689513*k3*k4 + 0.0127645854332177*k3 + 3.21431122469228e-5*k4**2 + 0.00902857694637784*k4)
    + xs['c3_1_d4_0']*(0.0142160519792486*k3**4 - 0.454703013515982*k3**3 + 0.114062909229438*k3**2*k4 + 1.2416391532208*k3**2 - 0.0810021309692927*k3*k4 - 0.0164237414582671*k3 + 0.00784728450225797*k4**2 - 0.825636512988201*k4)

)


# expanded_expression = sp.expand(expressions)
# print("the function is")
# print(expressions/0.032740)

kappa_list = {'c3_m14_d4_m101' : {'k3': -13, 'k4': -100},
              'c3_m11_d4_m51'   : {'k3': -10, 'k4': -50},
              'c3_m5_d4_m21'   : {'k3': -4, 'k4': -20},
              'c3_m6_d4_m31'    : {'k3': -5, 'k4': -30},
              'c3_2_d4_59'     : {'k3': 3, 'k4': 60},
              'c3_7_d4_49'     : {'k3': 8, 'k4': 50},
              'c3_8_d4_99'    : {'k3': 9, 'k4': 100},
              'c3_16_d4_33'   : {'k3': 17, 'k4': 34},
              'c3_1_d4_2'      : {'k3': 2, 'k4': 3},
              'c3_2_d4_3'     : {'k3': 3, 'k4': 4},
              'c3_2_d4_m1'     : {'k3': 3, 'k4': 0},
              'c3_0_d4_0-reweight'     : {'k3': 1, 'k4': 1},
              'c3_0_d4_m1-reweight'     : {'k3': 1, 'k4': 0},
              'c3_19_d4_19_-reweight'     : {'k3': 20, 'k4': 20},
              'c3_0_d4_m1'    : {'k3': 1, 'k4': 0},
              'c3_0_d4_99'    : {'k3': 1, 'k4': 100},
              'c3_19_d4_19'    : {'k3': 20, 'k4': 20},
              'c3_1_d4_0'    : {'k3': 2, 'k4': 1},
              'c3_4_d4_9'    : {'k3': 5, 'k4': 10},
              'c3_m1_d4_0'    : {'k3': 0, 'k4': 1},
              'c3_m1_d4_m1'    : {'k3': 0, 'k4': 0},
              'c3_m1p5_d4_m0p5': {'k3': -0.5, 'k4': 0.5},
              'c3_0_d4_0': {'k3': 1, 'k4': 1}
            

}


# cat_list = ['0bh3h','1bh2h','2bh1h','3bh0h']
cat_list = ['0bh3h']
for cat in cat_list:
    path_for_histograms = "/eos/home-x/xgeng/workspace/HHH/CMSSW_12_5_2/src/hhh-analysis-framework/output/v33/run2/ProbHHH6b_%s_inclusive_CR/histograms"%(cat)
    var_list = ["h1_spanet_boosted_mass","h2_spanet_boosted_mass","h3_spanet_boosted_mass","ProbMultiH_regubin"]
    for var in  var_list:
        file = ROOT.TFile("%s/histograms_%s.root"%(path_for_histograms,var),"READ")
        output_file = ROOT.TFile("%s/histograms_%s_reweight.root"%(path_for_histograms,var), "RECREATE")

        print(path_for_histograms)
        for kappa_name, values in kappa_list.items():
            k3 = values['k3']
            k4 = values['k4']
            combined_histogram = None

            for basis in reweight:
                
                hist_basis = file.Get(basis)
                

                if not hist_basis:
                    print("no %s"%(hist_basis))
                    continue

                weight =  eval(reweight[basis])

                if combined_histogram is None:
                    # print("now is none")
                    # print(basis)
                    combined_histogram = hist_basis.Clone(kappa_name)
                    combined_histogram.SetTitle(kappa_name)
                    # print(weight)
                    combined_histogram.SetName(kappa_name)
                    combined_histogram.Scale(weight)
                else:
                    # print(basis)
                    # print(weight)
                    hist_temp = hist_basis.Clone()
                    hist_temp.Scale(weight)
                    combined_histogram.Add(hist_temp)  



            combined_histogram.Write()
            print("%s already done"%kappa_name)
            
        # hist_SM = file.Get("HHH_kappa").Get('c3_0_d4_0')
        # if hist_SM:
        #     hist_SM.Write()
        #     print("Standard Model histogram has been written.")
        # else:
        #     print("Standard Model histogram (c3_0_d4_0) not found.")

        hist_data = file.Get('data_obs')
        if hist_data:
            hist_data.Write()
            print("Standard Model histogram has been written.")
        else:
            print("Standard Model histogram (data_obs) not found.")

        hist_QCD = file.Get('QCD_datadriven')
        if hist_QCD:
            hist_QCD.Write()
            print("Standard Model histogram has been written.")
        else:
            print("Standard Model histogram (QCD) not found.")



        file.Close()
        output_file.Close()
