import sympy as sp
import ROOT
import numpy as np
import matplotlib.pyplot as plt

k4, k3 = sp.symbols('k4 k3')



# reweight = {'c3_0_d4_m1'     : '0.01*k4**2 + 0.318534528202425*k4*k3**2 - 1.31853452820243*k4*k3 - 0.01*k4 - 0.00404182041820418*k3**4 - 0.188269021261641*k3**3 + 0.274565278509927*k3**2 + 0.917745563169917*k3',
#             'c3_0_d4_99'   : '0.000101010101010101*k4**2 - 5.45252205768805e-5*k4*k3**2 + 5.45252205768828e-5*k4*k3 - 0.000101010101010101*k4 + 2.65881446693261e-6*k3**4 - 9.21000551997246e-6*k3**3 + 6.35435358682633e-5*k3**2 - 5.69923448152232e-5*k3',
#             'c3_19_d4_19'   : '-2.03879412444105e-22*k4**2 - 1.52595510917515e-5*k4*k3**2 + 1.52595510917515e-5*k4*k3 + 2.03879412444105e-22*k4 + 7.76849873761895e-6*k3**4 - 1.63693366256971e-5*k3**3 + 9.98806980551009e-6*k3**2 - 1.38723191743197e-6*k3',
#             'c3_1_d4_0'     : '8.35090073371053e-19*k4**2 - 0.118871903004744*k4*k3**2 + 0.118871903004744*k4*k3 - 8.35090073371053e-19*k4 - 0.00615006150061501*k3**4 + 0.239149534352486*k3**3 - 0.0555262695484097*k3**2 - 0.177473203303462*k3',
#             'c3_4_d4_9'    : '2.60965647928454e-20*k4**2 + 0.00648392198207696*k4*k3**2 - 0.00648392198207697*k4*k3 - 2.60965647928454e-20*k4 - 0.00027060270602706*k3**4 - 0.000620277631347738*k3**3 - 0.00272887014584432*k3**2 + 0.00361975048321911*k3',
#             'c3_m1_d4_0'     : '6.68072058696843e-18*k4**2 + 0.0208223510806536*k4*k3**2 - 1.02082235108065*k4*k3 + 1.0*k4 - 0.0287822878228783*k3**4 + 0.667791249341065*k3**3 - 1.3227200843437*k3**2 + 0.683711122825514*k3',
#             'c3_m1_d4_m1'     : '-6.68072058696843e-18*k4**2 - 0.341776489193463*k4*k3**2 + 1.34177648919346*k4*k3 - 1.0*k4 - 0.00782287822878225*k3**4 + 0.487912493410648*k3**3 - 1.067200843437*k3**2 - 0.41288877174486*k3 + 1.0',
#             'c3_m1p5_d4_m0p5': '8.35090073371053e-19*k4**2 + 0.151818661043753*k4*k3**2 - 0.151818661043753*k4*k3 - 8.35090073371053e-19*k4 + 0.019680196801968*k3**4 - 0.612897557547004*k3**3 + 1.54911263398348*k3**2 - 0.955895273238447*k3',
#             'c3_0_d4_0'     : '-0.0101010101010101*k4**2 - 0.0369412853390325*k4*k3**2 + 1.03694128533903*k4*k3 + 0.0101010101010101*k4 + 0.0273770265613342*k3**4 - 0.593040841322061*k3**3 + 0.624424623375876*k3**2 - 0.058760808615149*k3'
# }

reweight = {'c3_19_d4_19'   : '9.06091847289793e-6*k3**4 - 4.9300725444354e-5*k3**3 - 1.28986682294749e-5*k3**2*k4 + 7.41895333895021e-5*k3**2 + 4.88255754744921e-5*k3*k4 - 2.35068699375642e-5*k3 + 1.04428564804817e-7*k4**2 - 4.64741922903036e-5*k4',
            'c3_1_d4_2'     : '0.00181859908941073*k3**4 + 0.0612344145588463*k3**3 - 0.117052946187404*k3**2*k4 - 0.0852248165990747*k3**2 + 0.495450856752831*k3*k4 - 0.34453745664648*k3 - 0.00366709259597299*k4**2 - 0.00802155837215495*k4',
            'c3_0_d4_0'     : '-0.0156567767640078*k3**4 + 0.296450661053703*k3**3 + 0.116113507117289*k3**2*k4 - 1.17541762393027*k3**2 - 0.943320520412559*k3*k4 + 1.28092989493571*k3 - 0.00623794854805879*k4**2 + 1.4471388065482*k4',
            'c3_2_d4_m1'     : '-0.00432741529694681*k3**4 + 0.134315219432959*k3**3 - 0.0348180673391588*k3**2*k4 - 0.254218287446726*k3**2 - 0.0121776760133018*k3*k4 + 0.00399143379444837*k3 - 0.00120239049516266*k4**2 + 0.16843718336389*k4',
            'c3_m1_d4_m1'     : '0.00269506107191331*k3**4 + 0.0869752273166167*k3**3 - 0.173807100320902*k3**2*k4 - 0.32776033936777*k3**2 + 1.06104582179224*k3*k4 - 0.205596010021244*k3 + 0.00556313938999517*k4**2 - 1.44911579986085*k4 + 1.0',
            'c3_m1p5_d4_m0p5': '0.00178625756289069*k3**4 - 0.128966102905578*k3**3 + 0.0878144535538641*k3**2*k4 + 0.614548792715285*k3**2 - 0.499940475718061*k3*k4 - 0.7311804061937*k3 - 0.00243811458821102*k4**2 + 0.65837559557351*k4',
            'c3_0_d4_99'   : '3.54406639377261e-6*k3**4 - 8.23419233486239e-5*k3**3 + 3.68602946798598e-6*k3**2*k4 + 0.000190060163750484*k3**2 - 0.000133213138375878*k3*k4 + 7.52070262542428e-5*k3 + 0.0001028747943406*k4**2 - 0.000159817018482608*k4',
            'c3_4_d4_9'    : '-0.000544382627375349*k3**4 + 0.00482523670822783*k3**3 + 0.00769645658563427*k3**2*k4 - 0.0138311282893779*k3**2 - 0.0199714878689513*k3*k4 + 0.0127645854332177*k3 + 3.21431122469228e-5*k4**2 + 0.00902857694637784*k4',
            'c3_1_d4_0'     : '0.0142160519792486*k3**4 - 0.454703013515982*k3**3 + 0.114062909229438*k3**2*k4 + 1.2416391532208*k3**2 - 0.0810021309692927*k3*k4 - 0.0164237414582671*k3 + 0.00784728450225797*k4**2 - 0.825636512988201*k4'
 }
# xs_0bh3h = [0.03274,0.03624,5.243,0.09674,131.8,0.2182,0.0511,0.02567,0.1004]

xs ={     'c3_19_d4_19': 131.8,
          'c3_1_d4_2'  :0.01415,
          'c3_0_d4_0'  :0.03274,
          'c3_2_d4_m1' :0.0511,
          'c3_m1_d4_m1':0.09674,
          'c3_m1p5_d4_m0p5':0.1723,
          'c3_0_d4_99' :5.243,
          'c3_4_d4_9'  :0.2182,
          'c3_1_d4_0'  :0.02567
    
}
expressions = (
      xs['c3_19_d4_19']*(9.06091847289793e-6*k3**4 - 4.9300725444354e-5*k3**3 - 1.28986682294749e-5*k3**2*k4 + 7.41895333895021e-5*k3**2 + 4.88255754744921e-5*k3*k4 - 2.35068699375642e-5*k3 + 1.04428564804817e-7*k4**2 - 4.64741922903036e-5*k4)
    + xs['c3_1_d4_2']*(0.00181859908941073*k3**4 + 0.0612344145588463*k3**3 - 0.117052946187404*k3**2*k4 - 0.0852248165990747*k3**2 + 0.495450856752831*k3*k4 - 0.34453745664648*k3 - 0.00366709259597299*k4**2 - 0.00802155837215495*k4)
    + xs['c3_0_d4_0']*(-0.0156567767640078*k3**4 + 0.296450661053703*k3**3 + 0.116113507117289*k3**2*k4 - 1.17541762393027*k3**2 - 0.943320520412559*k3*k4 + 1.28092989493571*k3 - 0.00623794854805879*k4**2 + 1.4471388065482*k4) 
    + xs['c3_2_d4_m1']*(-0.00432741529694681*k3**4 + 0.134315219432959*k3**3 - 0.0348180673391588*k3**2*k4 - 0.254218287446726*k3**2 - 0.0121776760133018*k3*k4 + 0.00399143379444837*k3 - 0.00120239049516266*k4**2 + 0.16843718336389*k4)
    + xs['c3_m1_d4_m1']*(0.00269506107191331*k3**4 + 0.0869752273166167*k3**3 - 0.173807100320902*k3**2*k4 - 0.32776033936777*k3**2 + 1.06104582179224*k3*k4 - 0.205596010021244*k3 + 0.00556313938999517*k4**2 - 1.44911579986085*k4 + 1.0)
    + xs['c3_m1p5_d4_m0p5']*(0.00178625756289069*k3**4 - 0.128966102905578*k3**3 + 0.0878144535538641*k3**2*k4 + 0.614548792715285*k3**2 - 0.499940475718061*k3*k4 - 0.7311804061937*k3 - 0.00243811458821102*k4**2 + 0.65837559557351*k4)
    + xs['c3_0_d4_99']*(3.54406639377261e-6*k3**4 - 8.23419233486239e-5*k3**3 + 3.68602946798598e-6*k3**2*k4 + 0.000190060163750484*k3**2 - 0.000133213138375878*k3*k4 + 7.52070262542428e-5*k3 + 0.0001028747943406*k4**2 - 0.000159817018482608*k4)
    + xs['c3_4_d4_9']*(-0.000544382627375349*k3**4 + 0.00482523670822783*k3**3 + 0.00769645658563427*k3**2*k4 - 0.0138311282893779*k3**2 - 0.0199714878689513*k3*k4 + 0.0127645854332177*k3 + 3.21431122469228e-5*k4**2 + 0.00902857694637784*k4)
    + xs['c3_1_d4_0']*(0.0142160519792486*k3**4 - 0.454703013515982*k3**3 + 0.114062909229438*k3**2*k4 + 1.2416391532208*k3**2 - 0.0810021309692927*k3*k4 - 0.0164237414582671*k3 + 0.00784728450225797*k4**2 - 0.825636512988201*k4)

)
# expanded_expression = sp.expand(expressions)
print("the function is")
print(expressions/0.032740)

kappa_list = {'c3_m14_d4_m101' : {'k3': -13, 'k4': -100},
              'c3_m11_d4_m51'   : {'k3': -10, 'k4': -50},
              'c3_m5_d4_m21'   : {'k3': -4, 'k4': -20},
              'c3_m6_d4_m31'    : {'k3': -5, 'k4': -30},
              'c3_2_d4_59'     : {'k3': 3, 'k4': 60},
              'c3_7_d4_49'     : {'k3': 8, 'k4': 50},
              'c3_8_d4_99'    : {'k3': 9, 'k4': 100},
              'c3_16_d4_33'   : {'k3': 17, 'k4': 34},
              'c3_1_d4_2'      : {'k3': 2, 'k4': 3},
              'c3_2_d4_3'     : {'k3': 3, 'k4': 4},
              'c3_2_d4_m1'     : {'k3': 3, 'k4': 0},
              'c3_0_d4_0-reweight'     : {'k3': 1, 'k4': 1},
              'c3_0_d4_m1-reweight'     : {'k3': 1, 'k4': 0},
              'c3_19_d4_19_-reweight'     : {'k3': 20, 'k4': 20},
              'c3_0_d4_m1'    : {'k3': 1, 'k4': 0},
              'c3_0_d4_99'    : {'k3': 1, 'k4': 100},
              'c3_19_d4_19'    : {'k3': 20, 'k4': 20},
              'c3_1_d4_0'    : {'k3': 2, 'k4': 1},
              'c3_4_d4_9'    : {'k3': 5, 'k4': 10},
              'c3_m1_d4_0'    : {'k3': 0, 'k4': 1},
              'c3_m1_d4_m1'    : {'k3': 0, 'k4': 0},
              'c3_m1p5_d4_m0p5': {'k3': -0.5, 'k4': 0.5},
              'c3_0_d4_0': {'k3': 1, 'k4': 1}
            

}

path_for_histograms = "/eos/home-x/xgeng/workspace/HHH/CMSSW_12_5_2/src/hhh-analysis-framework/output/v33/run2/ProbHHH6b_0bh3h_inclusive_CR/histograms"
output_path = "/eos/user/x/xgeng/workspace/HHH/CMSSW_11_3_4/src/datacards_maker_hhh/teste_datacards/v33/kappa_reweight/HHH_only"
var_list = ["h1_spanet_boosted_mass","h2_spanet_boosted_mass","h3_spanet_boosted_mass"]
for var in  var_list:
    file = ROOT.TFile("%s/histograms_%s.root"%(path_for_histograms,var),"READ")
    output_file = ROOT.TFile("%s/histograms_%s_reweight.root"%(path_for_histograms,var), "RECREATE")

    print(path_for_histograms)
    for kappa_name, values in kappa_list.items():
        k3 = values['k3']
        k4 = values['k4']
        combined_histogram = None

        for basis in reweight:
            
            hist_basis = file.Get(basis)

            if not hist_basis:
                print("no %s"%(hist_basis))
                continue

            weight =  eval(reweight[basis])

            if combined_histogram is None:
                # print("now is none")
                # print(basis)
                combined_histogram = hist_basis.Clone(kappa_name)
                combined_histogram.SetTitle(kappa_name)
                # print(weight)
                combined_histogram.SetName(kappa_name)
                combined_histogram.Scale(weight)  
            else:
                # print(basis)
                # print(weight)
                hist_temp = hist_basis.Clone()
                hist_temp.Scale(weight) 
                combined_histogram.Add(hist_temp)  



        combined_histogram.Write()
        print("%s already done"%kappa_name)
        
    # hist_SM = file.Get("HHH_kappa").Get('c3_0_d4_0')
    # if hist_SM:
    #     hist_SM.Write()
    #     print("Standard Model histogram has been written.")
    # else:
    #     print("Standard Model histogram (c3_0_d4_0) not found.")

    hist_data = file.Get('data_obs')
    if hist_data:
        hist_data.Write()
        print("Standard Model histogram has been written.")
    else:
        print("Standard Model histogram (data_obs) not found.")

    hist_QCD = file.Get('QCD_datadriven')
    if hist_QCD:
        hist_QCD.Write()
        print("Standard Model histogram has been written.")
    else:
        print("Standard Model histogram (QCD) not found.")



    file.Close()
    output_file.Close()
